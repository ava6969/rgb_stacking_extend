syntax = "proto3";

package deepmind.reverb;

import "google/protobuf/timestamp.proto";
import "tensorflow/core/framework/tensor.proto";
import "tensorflow/core/protobuf/struct.proto";

// The actual data is stored in chunks. The data can be arbitrary tensors. We do
// not interpret the bytes data of the tensors on the server side. It is up to
// the client to compress the bytes blob within the tensors.
message ChunkData {
  // Unique identifier of the chunk.
  uint64 chunk_key = 1;

  // The timesteps within the episode that the chunk covers.
  SequenceRange sequence_range = 2;

  // Actual tensor data.
  message Data {
    repeated tensorflow.TensorProto tensors = 1;
  }
  Data data = 5 [lazy = true];

  // Number of tensors in the data field. Set explicitly so that Reverb server
  // can check it without accessing lazy data field (which is expensive to
  // parse).
  int32 data_tensors_len = 6;

  // True if delta encoding has been applied before compressing data.
  bool delta_encoded = 4;

  // Deprecated December 2020 and retained to provide backward
  // compatibility with checkpoints created before this point.
  repeated tensorflow.TensorProto deprecated_data = 3 [deprecated = true];
}

// A range that specifies which items to slice out from a sequence of chunks.
// The length of all chunks must at least be `offset`+`length`.
message SliceRange {
  // Offset where the slice should start.
  int32 offset = 1;

  // Length of the slice. Can span multiple chunks.
  int32 length = 2;
}

message SequenceRange {
  // Globally unique identifier of the episode the sequence belongs to.
  uint64 episode_id = 1;

  // Index within the episode of the first timestep covered by the range.
  int32 start = 2;

  // Index within the episode of the last timestep covered by the range.
  // Must be >= start_index.
  int32 end = 3;

  // If set then at least one step is missing from the data. The number of steps
  // (i.e batch size) present in the data is unknown and thus must be manually
  // checked. However, the `start` and `end` step is guaranteed to be at first
  // and last position in the data.
  bool sparse = 4;
}

message FlatTrajectory {
  message ChunkSlice {
    // Unique identifier of the ChunkData which owns the compressed data.
    uint64 chunk_key = 1;

    // Index of the first element in the chunk to include.
    int32 offset = 2;

    // Number of elements from the chunk to include.
    int32 length = 3;

    // Tensor index of the tensor within the chunk.
    int32 index = 4;
  }

  message Column {
    // Chunk slices to concat.
    repeated ChunkSlice chunk_slices = 1;

    // If true then the batch dim (must be 1) is emitted when unpacked.
    // Requires that column is made up of exactly one ChunkSlice of length 1.
    bool squeeze = 2;
  }

  // Flattened columns of the trajectory.
  repeated Column columns = 1;
}

// A prioritized item is part of a table and references a chunk of
// data. Sampling happens based on the priority of items.
//
// Next ID: 9.
// LINT.IfChange
message PrioritizedItem {
  // Unique identifier of this item.
  uint64 key = 1;

  // Priority table that the item belongs to.
  string table = 2;

  // Priority used for sampling.
  double priority = 5;

  // The number of times the item has been sampled.
  int32 times_sampled = 6;

  // The time when the item was first inserted.
  google.protobuf.Timestamp inserted_at = 7;

  // Flattened representation of item's trajectory.
  FlatTrajectory flat_trajectory = 8;

  // Deprecated January 2021 and retained to provide backward compatibility
  // with checkpoints created before this point.
  repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
  SliceRange deprecated_sequence_range = 4 [deprecated = true];
}
// LINT.ThenChange(reverb_service_impl.cc)

// Used for updating an existing PrioritizedItem.
message KeyWithPriority {
  // Identifier of the PrioritizedItem.
  uint64 key = 1;

  // Priority used for sampling.
  double priority = 2;
}

message SampleInfo {
  // Item from that was sampled from the table.
  PrioritizedItem item = 1;

  // Probability that this item had at sampling time. Useful for importance
  // sampling.
  double probability = 2;

  // Number of items in the table at the time of the sample operation.
  int64 table_size = 3;

  // Whether the sample was delayed due to rate limiting of the sampler.
  bool rate_limited = 4;
}

// LINT.IfChange
// Metadata about the table, including (optional) data signature.
//
// These fields correspond to initialization arguments of the
// `Table` class, unless noted otherwise.
//
// Next ID: 13.
message TableInfo {
  // Table's name.
  string name = 8;

  // Sampler and remover metadata.
  KeyDistributionOptions sampler_options = 1;
  KeyDistributionOptions remover_options = 2;

  // Max size of the table.
  int64 max_size = 3;

  // Max number of times an element can be sampled before being
  // removed.
  int32 max_times_sampled = 4;

  // How data read/write is rate limited.
  RateLimiterInfo rate_limiter_info = 5;

  // Optional data signature for tensors stored in the table.  Note
  // that this data type is more flexible than we use.  For example,
  // we only store tensors (TensorSpecProto, TypeSpecProto) and not
  // any special data types (no NoneValue or other special fixed values).
  tensorflow.StructuredValue signature = 6;

  // Current size of table.
  int64 current_size = 7;

  // Number of episodes referenced by the items in the table.
  int64 num_episodes = 9;

  // Number of episodes once referenced by items in the table but no longer is.
  // The total number of episodes thus is `num_episodes + num_deleted_episodes`.
  int64 num_deleted_episodes = 10;

  // Number of unique items sampled from the table since the last reset.
  int64 num_unique_samples = 11;

  // Table worker execution time distribution.
  TableWorkerTime table_worker_time = 12;
}
// LINT.ThenChange(../py/reverb/reverb_types.py)

message RateLimiterCallStats {
  // The total number of completed calls.
  int64 completed = 2;

  reserved 1, 3, 4, 5;
}

message RateLimiterInfo {
  // The average number of times each item should be sampled during its
  // lifetime.
  double samples_per_insert = 1;

  // The minimum and maximum values the cursor is allowed to reach. The cursor
  // value is calculated as `insert_count * samples_per_insert -
  // sample_count`. If the value would go beyond these limits then the call is
  // blocked until it can proceed without violating the constraints.
  double min_diff = 2;
  double max_diff = 3;

  // The minimum number of inserts required before any sample operation.
  int64 min_size_to_sample = 4;

  // Stats regarding the limiting of insert calls.
  RateLimiterCallStats insert_stats = 5;

  // Stats regarding the limiting of sample calls.
  RateLimiterCallStats sample_stats = 6;
}

message TableWorkerTime {
  // Cumulative time the table worker is performing general work.
  int64 running_ms = 1;

  // Cumulative time the table worker is actively processing sampling requests.
  int64 sampling_ms = 2;

  // Cumulative time the table worker is actively processing insert requests.
  int64 inserting_ms = 3;

  // Cumulative time the table worker is sleeping as there is no work to do
  // (there are no pending insert/sample requests to process).
  int64 sleeping_ms = 4;

  // Cumulative time the table worker is blocked waiting for sampling requests
  // There are pending insert requests which are blocked by the rate limiter,
  // while there are no sampling requests which could unblock inserts.
  // The system can't make further progress and the worker is put to sleep until
  // sample request arives.
  int64 waiting_for_sampling_ms = 5;

  // Cumulative time the table worker is blocked waiting for insert requests
  // There are pending sample requests which are blocked by the rate
  // limiter, while there are no insert requests which could unblock sampling.
  // The system can't make further progress and the worker is put to sleep until
  // insert request arives.
  int64 waiting_for_inserts_ms = 6;
}

// Metadata about sampler or remover.  Describes its configuration.
message KeyDistributionOptions {
  message Prioritized {
    double priority_exponent = 1;
  }

  message Heap {
    bool min_heap = 1;
  }

  oneof distribution {
    bool fifo = 1;
    bool uniform = 2;
    Prioritized prioritized = 3;
    Heap heap = 4;
    bool lifo = 6;
  }
  reserved 5;
  bool is_deterministic = 7;
}

// Uint128 representation.  Can be used for unique identifiers.
message Uint128 {
  uint64 high = 1;
  uint64 low = 2;
}

// Representation of a timeout.  A value < 0 means never time out.
message Timeout {
  int64 milliseconds = 1;
}
